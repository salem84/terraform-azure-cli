name: release

# trigger on published release
on:
  push:
    branches:
      - "master"

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@master
        with:
          dockerfile: "Dockerfile"

  build_push_release:
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        tf_version:
          - "0.11.14"
          - "0.12.29"
          - "0.13.2"
        azcli_version:
          - "2.9.1"
          - "2.10.1"
          # - "2.11.1" # not ready for release yet: https://github.com/Azure/azure-cli/issues/14963

    env:
      ORGANIZATION: "zenika"
      IMAGE_NAME: "terraform-azure-cli"

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Get and save release tag
        run: echo "::set-env name=RELEASE_TAG::${GITHUB_REF##*/}"

      - name: Build and save image release tag
        run: echo "::set-env name=IMAGE_RELEASE_TAG::release-${RELEASE_TAG}_terraform-${{ matrix.tf_version }}_azcli-${{ matrix.azcli_version }}"

      - name: Build image
        run: docker image build . --file Dockerfile --build-arg TERRAFORM_VERSION=${{ matrix.tf_version }} --build-arg AZURE_CLI_VERSION=${{ matrix.azcli_version }} --tag ${ORGANIZATION}/${IMAGE_NAME}:${IMAGE_RELEASE_TAG} --tag ghcr.io/${{ github.repository_owner }}/${IMAGE_NAME}:${IMAGE_RELEASE_TAG}

      # - name: Login to Docker Hub registry
      #   run: echo '${{ secrets.DOCKERHUB_PASS }}' | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      # - name: Push image to Docker Hub registry
      #   run: docker push ${ORGANIZATION}/${IMAGE_NAME}:${IMAGE_RELEASE_TAG}

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container registry
        run: docker push ghcr.io/${{ github.repository_owner }}/${IMAGE_NAME}:${IMAGE_RELEASE_TAG}

      - name: Save image
        run: docker image save -o ${IMAGE_NAME}-${IMAGE_RELEASE_TAG}.tar ${ORGANIZATION}/${IMAGE_NAME}:${IMAGE_RELEASE_TAG}

      - name: Upload image artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.IMAGE_NAME }}-${{ env.IMAGE_RELEASE_TAG }}
          path: ${{ env.IMAGE_NAME }}-${{ env.IMAGE_RELEASE_TAG }}.tar
